* 前言

今天看代码时候，遇到一些宏，之前没有见过，感觉挺新鲜。如是上网google一下，顺便总结一下，方便以后学习和运用。C语言程序中广泛的使用宏定义，采用关键字define进行定义，宏只是一种简单的字符串替换，根据是否带参数分为无参和带参。宏的简单应用很容易掌握，今天主要总结一下宏的特殊符号及惯用法。
 * 宏中包含特殊符号：#、##
 * 宏定义用do{ }while(0)

* 特殊符号#、##

 * #

   When you put a # before an argument in a preprocessor  macro, the preprocessor turns that argument into a character array. 

  在一个宏中的参数前面使用一个#,预处理器会把这个参数转换为一个字符数组　

  简化理解：#是“字符串化”的意思，出现在宏定义中的#是把跟在后面的参数转换成一个字符串
 
	#+BEGIN_SRC note
	#define ERROR_LOG(module)   fprintf(stderr,"error: "#module"\n")
	#+END_SRC

#+BEGIN_QUOTE
  ERROR\_LOG("add"); 转换为 fprintf(stderr,"error: "add"\n");

  ERROR\_LOG(devied =0); 转换为 fprintf(stderr,"error: devied=0\n");
#+END_QUOTE

 * ##

  “##”是一种分隔连接方式，它的作用是先分隔，然后进行强制连接。

  在普通的宏定义中，预处理器一般把空格解释成分段标志，对于每一段和前面比较，相同的就被替换。但是这样做的结果是，被替换段之间存在一些空格。如果我们不希望出现这些空格，就可以通过添加一些##来替代空格。

	#+BEGIN_SRC note
	#define TYPE1(type,name)   type name_##type##_type
	#define TYPE2(type,name)   type name##_##type##_type
	#+END_SRC

#+BEGIN_QUOTE
TYPE1(int, c); 转换为：int 　name\_int\_type ; (因为##号将后面分为 name\_ 、type 、 \_type三组，替换后强制连接)
TYPE2(int, d);转换为： int 　d\_int\_type ; (因为##号将后面分为 name、\_、type 、\_type四组，替换后强制连接)
#+END_QUOTE

* 宏定义中do{ }while(0)

  第一眼看到这样的宏时，觉得非常奇怪，为什么要用do……while(0)把宏定义的多条语句括起来？非常想知道这样定义宏的好处是什么，于是google、百度一下了。

  采用这种方式是为了防范在使用宏过程中出现错误，主要有如下几点：

  * 空的宏定义避免warning:
	#+BEGIN_SRC note
	　　#define foo() do{}while(0)
	#+END_SRC

  * 存在一个独立的block，可以用来进行变量定义，进行比较复杂的实现

  * 如果出现在判断语句过后的宏，这样可以保证作为一个整体来是实现：
	#+BEGIN_SRC note
	　　　　  #define foo(x) \
	　　　　　　　 action1(); \
	　　　　　　 　action2();
	#+END_SRC

  	在以下情况下：

	#+BEGIN_SRC note
	　　　　if(NULL == pPointer)
	 　　　　　　  foo();
	#+END_SRC

	就会出现action1和action2不会同时被执行的情况，而这显然不是程序设计的目的。

  * 以上的第3种情况用单独的{}也可以实现，但是为什么一定要一个do{}while(0)呢，看以下代码：
	#+BEGIN_SRC note
	　　　　　　#define switch(x,y) {int tmp; tmp="x";x=y;y=tmp;}
	　　　　　　if(x>y)
	　　　　　　　　switch(x,y);
	　　　　　　else       //error, parse error before else
	　　　　　　otheraction();
	#+END_SRC

    在把宏引入代码中，会多出一个分号，从而会报错。这对这一点，可以将if和else语句用{}括起来，可以避免分号错误。

　　使用do{….}while(0) 把它包裹起来，成为一个独立的语法单元，从而不会与上下文发生混淆。同时因为绝大多数的编译器都能够识别do{…}while(0)这种无用的循环并进行优化，所以使用这种方法也不会导致程序的性能降低

[[http://www.cnblogs.com/Anker/p/3418792.html][来源]]
